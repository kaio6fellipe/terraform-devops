name: Terraform plan (Development)

on: 
  pull_request:
    branches: [development]
    # paths-ignore:
    #   - '**README.md'

# on: 
#   workflow_run:
#     workflows: 
#       - Generate terraform docs
#     types:
#       - completed

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TF_VAR_AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
  TF_VAR_ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

jobs:
  sonarcloud:
    name: Security check
    uses: kaio6fellipe/terraform-devops/.github/workflows/sonar.yml@development
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  documentation:
    name: Generate docs
    needs: sonarcloud
    uses: kaio6fellipe/terraform-devops/.github/workflows/documentation.yml@development
    github:
      ref: ${{ github.ref }}
  plan:
    name: 'Terraform plan (Development)'
    needs: [sonarcloud, documentation]
    runs-on: ubuntu-latest
    # needs: docs
    
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=true -backend-config="config/dev/backend.hcl"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="config/dev/terraform.tfvars"
        continue-on-error: true
        
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        # env:
        #   PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  # docs:
  #   name: 'terraform-docs'
  #   runs-on: ubuntu-latest
  #   # needs: plan
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       ref: ${{ github.event.pull_request.head.ref }}
  #       token: ${{ secrets.GITHUB_TOKEN }}
# 
  #   - name: Render terraform docs inside the README.md and push changes back to PR branch
  #     uses: terraform-docs/gh-actions@v1.0.0
  #     with:
  #       find-dir: .
  #       output-file: README.md
  #       output-method: inject
  #       git-push: "true"