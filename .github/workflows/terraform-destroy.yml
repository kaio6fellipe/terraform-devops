name: Terraform destroy

on:
  workflow_dispatch:
    inputs:
      dir:
        description: 'Directory with resources to be destroyed'
        required: true
        default: .
      log_level:
        type: choice
        description: Log Level
        required: false
        options:
          - ERROR
          - WARN
          - INFO
          - DEBUG
          - TRACE
    branches: [development]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TF_VAR_AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
  TF_VAR_ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
  TF_VAR_ADMIN_USER_ARN: ${{ secrets.ADMIN_USER_ARN }}
  TF_VAR_ADMIN_USER_NAME: ${{ secrets.ADMIN_USER_NAME }}
  TF_VAR_ARGO_GITHUB_SSO_SECRET_KEY: ${{ secrets.ARGO_GITHUB_SSO_SECRET_KEY }}
  TF_VAR_CROSSPLANE_AWS_CREDENTIALS_CONTENT: ${{ secrets.CROSSPLANE_AWS_CREDENTIALS_CONTENT }}
  TF_WARN_OUTPUT_ERRORS: 1

jobs:
  destroy-stateless-resources:
    name: 'Terraform destroy stateless resources'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Destroy Stateless Resources
        id: destroy-stateless1
        run: |
          make python script=destroy_stateless_resources.py

      - name: Destroy Stateless Resources (Double check)
        id: destroy-stateless2
        run: |
          make python script=destroy_stateless_resources.py

  destroy:
    name: 'Terraform destroy'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install boto3 and other packages
        run: pip install boto3==1.26.114

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4

      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18.0'

      - name: Terramate Setup
        run: GOBIN=/usr/local/bin/ go install github.com/mineiros-io/terramate/cmd/terramate@v0.2.18

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -recursive -check
        continue-on-error: true

      - name: Terramate Fmt
        id: tm-fmt
        run: terramate fmt --check
        continue-on-error: true

      - name: Terramate Init
        id: init
        run: terramate run --reverse terraform init -backend=true

      - name: Terramate Validate
        id: validate
        run: terramate run --reverse terraform validate -no-color

      - name: Terramate Refresh
        run: terramate run --reverse terraform refresh

      - name: Remove Helm Releases from remote state of each Terramate stack
        run: |
          terramate run --reverse --continue-on-error terraform state rm 'module.platform.module.platform_k8s.helm_release'
        continue-on-error: true

      # - name: Remove Helm Releases from remote state (ArgoCD)
      #   run: | 
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.argocd
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.argocd_apps
      #   continue-on-error: true

      # - name: Remove Helm Releases from remote state (AWS Load Balancer Controller)
      #   run: | 
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.aws_load_balancer_controller
      #   continue-on-error: true

      # - name: Remove Helm Releases from remote state (External DNS)
      #   run: | 
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.external_dns
      #   continue-on-error: true

      # - name: Remove Helm Releases from remote state (External Secrets)
      #   run: | 
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.external_secrets
      #   continue-on-error: true

      # - name: Remove Helm Releases from remote state (Cluster Autoscaler)
      #   run: | 
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.cluster_autoscaler
      #   continue-on-error: true

      # - name: Remove Helm Releases from remote state (Cert Manager)
      #   run: | 
      #     terraform state rm module.us-east-1.module.platform.module.platform_k8s.helm_release.cert_manager
      #   continue-on-error: true

      - name: Terramate Destroy
        id: destroy1
        run: terramate run --reverse terraform destroy -auto-approve
        continue-on-error: true

      - name: Terramate Destroy (Double check)
        id: destroy2
        run: terramate run --reverse terraform destroy -auto-approve
        continue-on-error: true

      - name: Terramate Destroy Status
        if: steps.destroy2.outcome == 'failure'
        run: exit 1