name: Terraform plan

on: 
  pull_request:
    branches: [development]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TF_VAR_AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
  TF_VAR_ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
  TF_VAR_ADMIN_USER_ARN: ${{ secrets.ADMIN_USER_ARN }}
  TF_VAR_ADMIN_USER_NAME: ${{ secrets.ADMIN_USER_NAME }}
  TF_VAR_ARGO_GITHUB_SSO_SECRET_KEY: ${{ secrets.ARGO_GITHUB_SSO_SECRET_KEY }}
  TF_VAR_CROSSPLANE_AWS_CREDENTIALS_CONTENT: ${{ secrets.CROSSPLANE_AWS_CREDENTIALS_CONTENT }}

jobs:
  sonarcloud:
    name: Security check
    uses: kaio6fellipe/terraform-devops/.github/workflows/sonar.yml@development
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  tflint:
    name: Lint check
    uses: kaio6fellipe/terraform-devops/.github/workflows/tflint.yml@development
    # uses: ./.github/workflows/tflint.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  tfsec:
    name: Terraform Security check
    uses: kaio6fellipe/terraform-devops/.github/workflows/tfsec.yml@development
    # uses: ./.github/workflows/tfsec.yml

  checkov:
    name: Checkov Security check
    uses: kaio6fellipe/terraform-devops/.github/workflows/checkov.yml@development

  plan:
    name: 'Terraform plan'
    needs: [tflint]
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # GitActions CIDR commented because aws have a limit of 40 entries, with free runner there is no way to get the egress IP to allow public connections to EKS clusters
      # Ref: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-a-multiline-string
      # - name: Get GitActions egress CIDR blocks
      #   run: |
      #     source ./lib/github-meta-info
      #     EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "TF_VAR_GITHUB_ACTIONS_CIDR<<$EOF" >> $GITHUB_ENV
      #     function_get_cidr >> $GITHUB_ENV
      #     echo "$EOF" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4

      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18.0'

      - name: Terramate Setup
        run: GOBIN=/usr/local/bin/ go install github.com/mineiros-io/terramate/cmd/terramate@v0.2.18

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -recursive -check -no-color

      - name: Terramate Fmt
        id: tm-fmt
        run: terramate fmt --check

      - name: List all Stacks
        run: terramate list

      - name: Terramate Init
        id: init
        run: terramate run --changed terraform init -backend=true

      - name: Terramate Validate
        id: validate
        run: terramate run --changed terraform validate -no-color

      - name: Terramate Plan
        id: plan
        run: terramate run --changed terraform plan -no-color

      - uses: actions/github-script@v6
        if: always()
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`

            <details><summary>Format Output</summary>

            \`\`\`\n
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      # - name: Terramate Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
